#include <iostream>
#include <stack>
#include <string>
using namespace std;

int main() {
    string str;
    cin >> str;

    stack<char> s;    // 여는 괄호를 추적하기 위한 스택
    int temp = 1;     // 괄호의 곱셈값을 계산할 임시 변수
    int result = 0;   // 최종 결과값
    bool isValid = true;  // 올바른 괄호 구조인지 체크

    for (int i = 0; i < str.size(); i++) {
        char c = str[i];

        if (c == '(') {
            s.push(c);      // '('를 스택에 저장
            temp *= 2;      // '('가 나오면 곱하기 2
        }
        else if (c == '[') {
            s.push(c);      // '['를 스택에 저장
            temp *= 3;      // '['가 나오면 곱하기 3
        }
        else if (c == ')') {
            // 스택이 비었거나, 짝이 안 맞는 경우 → 잘못된 괄호
            if (s.empty() || s.top() != '(') {
                isValid = false;
                break;
            }

            // 직전 문자가 '('인 경우 → 바로 닫힌 괄호 → 값 추가
            if (str[i - 1] == '(') result += temp;

            s.pop();    // 여는 괄호 '(' 제거
            temp /= 2;  // 괄호 하나 닫혔으므로 이전 상태로 temp 복원
        }
        else if (c == ']') {
            // 스택이 비었거나, 짝이 안 맞는 경우 → 잘못된 괄호
            if (s.empty() || s.top() != '[') {
                isValid = false;
                break;
            }

            // 직전 문자가 '['인 경우 → 바로 닫힌 괄호 → 값 추가
            if (str[i - 1] == '[') result += temp;

            s.pop();    // 여는 괄호 '[' 제거
            temp /= 3;  // 괄호 하나 닫혔으므로 이전 상태로 temp 복원
        }
    }

    // 괄호가 올바르지 않거나 스택에 괄호가 남아 있으면 0 출력
    if (!isValid || !s.empty()) cout << 0;
    else cout << result;

    return 0;
}

// 백준 2504 : 괄호의 값
// 스택(심화)

// 괄호의 쌍을 찾아서 계속 더해주는 문제
// ()는 2, []는 3이고 괄호안의 괄호는 해당 괄호값에 곱해주는 형식이다.
// 여기서의 핵심은 괄호안의 괄호를 어떻게 판단하냐는 것이다.

// 답은 괄호안에서 계산되는 값들을 temp로 저장하여 준다는 것이다.
// 일단 임시값은 1로 시작한다.
// 만약 ( 이 나오면  : 임시값 * 2
// 만약 [ 가 나오면 : 임시값 * 3
// 만약 ) 가 나오면 : (의 짝이 나올떄 까지 스택에서 값들을 제거해주고 만약 직전문자가 ( 였던 경우는 결과값에 더해준다. 그리고 원상태로 /2으로 복원
// 만약 ] 가 나오면 : [의 짝이 나올떄 까지 스택에서 값들을 제거해주고 만약 직전문자가 [ 였던 경우는 결과값에 더해준다. 그리고 원상태로 /3으로 복원

// 위의 부분이 제일 어려운 부분인데 한번에 이게 괄호안의 괄호인지를 판단하는 것은 로직상으로 불가능이다. 따라서, 괄호안에 괄호값을 바로 계산하는 것이다.

// 예를 들어, (()[[]]) 코드가 있다고 해보자
// 시작은 ( 이므로 temp = 1 에서 temp = 2가 된다. 그럼 () 안에 들어오는 값들은 모두 * 2가 된다. ex (()), ([])
// 그럼 다음값은 ( 가 들어오게 된다. 마찬가지로 temp * 2 = 4
// 다음에는 이제 )로 닫히게 된다. 그럼 계산을 해보면 (()) 이므로 해당 값은 result로 들어가게 된다.
// 즉, 괄호안의 괄호를 바로 계산해주는 방식으로 result를 구하는 것이다.
// 그리고 짝이 안나오는 경우가 발생할 수 있으므로 이를 스택으로 확인하고 올바른 괄호열인지를 검출하는 형태!!

// 해당 아이디어를 얻는 것이 핵심이었던 문제이다.

// 실행시간 : 0ms