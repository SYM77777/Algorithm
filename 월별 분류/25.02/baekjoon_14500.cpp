#include <iostream>

using namespace std;

int N, M;
int arr[501][501];
long long ans = 0;

// 직선, 사각형, ㄴ, ㄹ, ㅗ 모양 순서로 진행
int tetro_dy[19][4] = { {0, 0, 0, 0}, {0, 1, 2, 3}, // 1자는 2가지만 존재
                        {0, 0, 1, 1}, // ㅁ는 한가지만 존재
                        {0, 1, 2, 2}, {0, 0, 0, 1}, {0, 0, 1, 2}, {0, 0, 0, -1}, // ㄴ 모양 4가지
                        {0, 0, -1, -2}, {-1, 0, 0, 0}, {0, 0, 1, 2}, {0, 0, 0, 1}, // ㄴ 대칭 모양 4가지
                        {0, 1, 1, 2}, {0, 0, -1, -1}, {0, -1, -1, -2}, {0, 0, 1, 1}, // ㄹ, ㄹ 대칭 모양 4가지지
                        {0, 0, 0, 1}, {0, 1, 2, 1}, {0, 0, 0, -1}, {0, -1, 0, 1} // ㅜ, ㅏ, ㅗ, ㅓ
};
int tetro_dx[19][4] = { {0, 1, 2, 3}, {0, 0, 0, 0},
                        {0, 1, 0, 1},
                        {0, 0, 0, 1}, {0, 1, 2, 0}, {0, 1, 1, 1}, {0, 1, 2, 2}, // ㄴ 모양 4가지
                        {0, 1, 1, 1}, {0, 0, 1, 2}, {0, 1, 0, 0}, {0, 1, 2, 2}, // ㄴ 대칭 모양 4가지
                        {0, 0, 1, 1}, {0, 1, 1, 2}, {0, 0, 1, 1}, {0, 1, 1, 2}, // ㄹ, ㄹ 대칭 모양 4가지지
                        {0, 1, 2, 1}, {0, 0, 0, 1}, {0, 1, 2, 1}, {0, 1, 1, 1}, // ㅜ, ㅏ, ㅗ, ㅓ
};

void input() {
    cin >> N >> M;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> arr[i][j];
        }
    }

}

// 4칸을 더하며 진행하는 함수
void cal() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            for (int k = 0; k < 19; k++) {
                int tmp = 0;
                int check = 0;
                for (int l = 0; l < 4; l++) {
                    int ny = i + tetro_dy[k][l];
                    int nx = j + tetro_dx[k][l];

                    if (ny >= N || ny < 0 || nx >= M || nx < 0) {
                        check = 1;
                        break;
                    }
                    else tmp += arr[ny][nx];
                }
                if (check == 1) continue;
                if (tmp > ans) ans = tmp;
            }
        }
    }
}



int main() {

    input();
    cal();

    cout << ans;

    return 0;
}

// 문제분류 : 브루트포스 알고리즘, 구현
// 해당 문제는 도형을 돌려가며 얻을 수 있는 최댓값을 찾는 문제이다.
// 실행 시간을 줄이기 위하여 도형을 돌렸을때 얻을 수 있는 모든 모양의 정보들을 map(또는 배열)에 기록해 두고 해당 정보를 for문으로 반복시키면 문제 끝
// 실행시간 : 80ms (백준)